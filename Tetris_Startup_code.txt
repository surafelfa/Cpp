
/*
     HiLCoE School of Computer Science & Technology
          Problem Solving with Programming
				Assignment on Tetris

     Start-up code developed by the Instructor
     
     Winter 2019	
*/

#include <iostream>
#include <conio.h>
#include <string>
#include <ctype.h>
#include <graphics.h>
#include <stdlib.h>
#include <dos.h>
#include <time.h>

const int NB_BLOCKS = 1;
const int BAR_BLOCK = 1;
const int T_BLOCK   = 2;
const int L_BLOCK   = 3;
const int LR_BLOCK  = 4;
const int BOX_BLOCK = 5;
const int HORIZONTAL = 1;
const int VERTICAL = 2;
const int RIGHT = 1;
const int LEFT = 2;
const int DOWN  = 3;

const int BOARD_COLOR   = BLACK;
const int BKGRD_COLOR   = BOARD_COLOR;
const int FILLING_COLOR = GREEN; //LIGHTGRAY;
const int FRGRD_COLOR   = 1; //CYAN; //BLUE; //GREEN; //RED; // LIGHTGRAY;
// const int FRGRD_COLOR   = BOARD_COLOR; //FILLING_COLOR;
const int GRID_COLOR    = YELLOW;
const int BORDER_COLOR  = GRID_COLOR;

const int LEVEL1_SPEED 	= 800;

const int BOARDWIDTH 	= 180;
const int BOARDHEIGHT	= 240;
const int NB_ROWS  	= 15;
const int NB_COLS  	= 10;
const int CELL_SIZE	= BOARDHEIGHT/(NB_ROWS+1);
const int LEFTCORNER	= (600 - (CELL_SIZE*(NB_COLS+2)))/2; //230;
const int TOPCORNER	= 120;
const int INFOAREAWIDTH	= 600;
const int INFOAREAHEIGHT= 105;
const int INFOAREALEFT	= 20;
const int INFOAREATOP	= 370;

const int LEFTARROW=75;
const int RIGHTARROW=77;
const int UPARROW=72;
const int DOWNARROW=80;
const int ENTER=13;
const int ESC=27;
const int SPACE=32;


//initializes graphics driver
void initGraphEngine(){
  int gdriver = DETECT, gmode;
  initgraph(&gdriver, &gmode, "...\\BGI");
}

void displayInfo(char *msg){
  setcolor(WHITE);
  setfillstyle(SOLID_FILL, BLUE);
  bar(INFOAREALEFT+1,INFOAREATOP+1,INFOAREALEFT+400,
	INFOAREATOP+INFOAREAHEIGHT-1);
  settextstyle(DEFAULT_FONT, HORIZ_DIR, 1.5);
  outtextxy(INFOAREALEFT+30,INFOAREATOP+50,msg);
}

void clearDisplayArea(){
  setfillstyle(SOLID_FILL, BLACK);
  bar(LEFTCORNER+CELL_SIZE,0,(LEFTCORNER+BOARDWIDTH-CELL_SIZE),TOPCORNER-1);
}

void fillGrid( )
{
 int x = LEFTCORNER+CELL_SIZE,  y = TOPCORNER;
 setcolor(GRID_COLOR);
 for(int i=1;i<=NB_ROWS;i++)
 {
     for (int j=1;j<=NB_COLS;j++)
     { rectangle(x,y,x+CELL_SIZE,y+CELL_SIZE);
       x+=CELL_SIZE;
     }
     x=LEFTCORNER+CELL_SIZE;
     y+=CELL_SIZE;
 }
}

void drawBoard(){
 // Playing Board
 setfillstyle(SOLID_FILL, WHITE);
 bar(LEFTCORNER,TOPCORNER,LEFTCORNER+BOARDWIDTH,TOPCORNER+BOARDHEIGHT);
 setfillstyle(SOLID_FILL, BOARD_COLOR);
 bar(LEFTCORNER+CELL_SIZE,TOPCORNER,
	  (LEFTCORNER+BOARDWIDTH-CELL_SIZE),(TOPCORNER+BOARDHEIGHT-
     CELL_SIZE));
 fillGrid();
 // Display Area
 setfillstyle(SOLID_FILL, BLUE);
 bar(INFOAREALEFT,INFOAREATOP,INFOAREALEFT+INFOAREAWIDTH,INFOAREATOP+
		INFOAREAHEIGHT);
 rectangle(INFOAREALEFT,INFOAREATOP,INFOAREALEFT+INFOAREAWIDTH,
		INFOAREATOP+INFOAREAHEIGHT);
}

void reDrawCellsGrid(int xLeft, int yTop, int nbCells, int orientation)
  { // redraw the grid of cells
      int i;
      setcolor(BORDER_COLOR);
      for (i=1; i<=nbCells; i++) {
       rectangle(xLeft, yTop, xLeft+CELL_SIZE, yTop+CELL_SIZE);
       if (orientation == HORIZONTAL)  xLeft=xLeft+CELL_SIZE;
       else yTop = yTop + CELL_SIZE;
      }
  }


//draws Bar Block
void drawBarBlock(int xLeft, int yTop, int orientation, int fillingColor)
  {
     setfillstyle(SOLID_FILL, fillingColor);
     if (orientation==HORIZONTAL) {
	  bar(xLeft, yTop, xLeft+4*CELL_SIZE,yTop+CELL_SIZE);
	  reDrawCellsGrid(xLeft, yTop, 4, HORIZONTAL);
     }
     else  {// orientation is VERTICAL
	  bar(xLeft, yTop, xLeft+CELL_SIZE, yTop+4*CELL_SIZE);
	  reDrawCellsGrid(xLeft, yTop ,4, VERTICAL);
     }
  }

// generates Bar block in random orientation
void generateBarBlock(int & orientation, int & xLeft, int & yTop, int & fillingColor)
      {
	orientation = HORIZONTAL; //VERTICAL;  //random(2) + 1;
	fillingColor = rand()%4 + 1;
	yTop = TOPCORNER;
	if (orientation == HORIZONTAL) xLeft  = LEFTCORNER+4*CELL_SIZE;
	else    xLeft = LEFTCORNER+5*CELL_SIZE;
	drawBarBlock(xLeft,yTop,orientation, fillingColor /*FRGRD_COLOR*/);
      }

// generates a block at random
void generateNewBlock( int * blockId, int * orientation,int * xLeft, int *
	yTop, int * fillingColor)
     { 
       *blockId = BAR_BLOCK; // random(NB_BLOCKS) + 1;
       switch(*blockId) {
	case T_BLOCK  : break;
	case L_BLOCK  : break;
	case LR_BLOCK : break;
	case BOX_BLOCK: break;
	case BAR_BLOCK: generateBarBlock(*orientation, *xLeft, *yTop, *fillingColor); break;
       }
     }

// check if Bar block can be moved to the left
void checkTranslateBarRouteLeft(int orientation, int xLeft, int yTop, int &
freeRoute)
      {      int maxNbCells;
	  // check if route is not blocked
	  yTop = yTop + CELL_SIZE/2;
	  freeRoute = 1; //route is free
	  switch (orientation) {
	    case HORIZONTAL:
	       xLeft = xLeft - CELL_SIZE/2;
	       if (getpixel(xLeft, yTop) != BOARD_COLOR) freeRoute = 0;
	       break;

	    case VERTICAL:
	       maxNbCells = 4;
	       xLeft  = xLeft - CELL_SIZE/2;
	       do
		if (getpixel(xLeft, yTop) == BOARD_COLOR ){
		    yTop = yTop + CELL_SIZE;
		    maxNbCells--;
		}
		else  freeRoute = 0; // route is blocked
	       while ( maxNbCells >= 1 && freeRoute);
	       break;
	  }
      }

// check if Bar block can be moved to the right
void checkTranslateBarRouteRight(int orientation, int xLeft, int yTop, int &
freeRoute)
      {      int maxNbCells;
	  // check if route is not blocked

	  freeRoute = 1; //route is free
	  switch (orientation) {
	    case HORIZONTAL:
	       // maxNbCells = 1;
	       yTop = yTop + CELL_SIZE/2;
	       xLeft = xLeft + 4*CELL_SIZE + CELL_SIZE/2;
	       if (getpixel(xLeft, yTop) != BOARD_COLOR)
		    freeRoute = 0;
	       break;

	    case VERTICAL:
	       maxNbCells = 4;
	       yTop = yTop + CELL_SIZE/2;
	       xLeft  = xLeft + CELL_SIZE + CELL_SIZE/2;
	       do
		if (getpixel(xLeft, yTop) == BOARD_COLOR ){
		    yTop = yTop + CELL_SIZE;
		    maxNbCells--;
		}
		else  freeRoute = 0; // route is blocked
	       while ( maxNbCells >= 1 && freeRoute);
	       break;
	  }
      }

// check if Bar block can be moved down
void checkTranslateBarRouteDown(int orientation, int xLeft, int yTop, int &
freeRoute)
      {      int maxNbCells;
	  // check if route is not blocked
	  xLeft = xLeft + CELL_SIZE/2;
	  freeRoute = 1; //route is not blocked
	  switch(orientation) {
	   case HORIZONTAL:
	       maxNbCells = 4;
	       yTop  = yTop + CELL_SIZE + CELL_SIZE/2;
	       do
		if (getpixel(xLeft, yTop) == BOARD_COLOR ){
		    xLeft = xLeft + CELL_SIZE;
		    maxNbCells--;
		}
		else  freeRoute = 0; // route is blocked
	       while ( maxNbCells >= 1 && freeRoute);
	       break;

	   case VERTICAL:
	       yTop = yTop + 4*CELL_SIZE + CELL_SIZE/2;
	       if (getpixel(xLeft, yTop) != BOARD_COLOR) freeRoute = 0;
	       break;
	  }
      }

// Invoke the appropriate checking function for Bar block depending on the direction
int checkTranslateBarRoute(int orientation, int xLeft, int yTop,
		int direction)
{    int maxNbCells, freeRoute = 1;
     switch (direction) {
       case RIGHT: checkTranslateBarRouteRight(orientation, xLeft, yTop,
freeRoute); break;
       case LEFT:  checkTranslateBarRouteLeft(orientation, xLeft, yTop,
freeRoute); break;
       case DOWN:  checkTranslateBarRouteDown(orientation, xLeft, yTop,
freeRoute); break;
     }
     return freeRoute;
  }

// translate the Bar block
void translateBarBlock(int orientation, int & xLeft, int & yTop, int fillingColor,
	int direction)
  {
     // Erase the bar at current position
     drawBarBlock(xLeft, yTop, orientation, BKGRD_COLOR);
     switch (direction) {
       case RIGHT: xLeft = xLeft + CELL_SIZE; break;
       case LEFT : xLeft = xLeft - CELL_SIZE; break;
       case DOWN : yTop = yTop + CELL_SIZE;   break;
     }
     // Now redraw the bar at the new position
     drawBarBlock(xLeft, yTop, orientation, fillingColor /*FRGRD_COLOR*/);
  }

// Invoke the appropriate route checking function for translation depending on block Id
int translateRouteFree(int blockId, int orientation, int xLeft, int yTop,
				int direction)
 { int freeRoute;
    switch(blockId) {
      case T_BLOCK  : break;
      case L_BLOCK  : break;
      case LR_BLOCK : break;
      case BOX_BLOCK: break;
      case BAR_BLOCK: freeRoute =
	     checkTranslateBarRoute(orientation, xLeft, yTop, direction);
	     break;
    }
    return freeRoute;
  }

// Invoke the appropriate function for translation depending on block Id
void translateBlock(int blockId, int & orientation, int & xLeft, int & yTop,
				      int fillingColor, int direction)
  {
    switch(blockId) {
      case T_BLOCK  :
      case L_BLOCK  :
      case LR_BLOCK :
      case BOX_BLOCK:
      case BAR_BLOCK:
	  translateBarBlock(orientation, xLeft, yTop, fillingColor, direction); break;
    }
  }

// Check if a Bar block can be rotated
int checkRotateBarRoute(int orientation, int xLeft, int yTop)
  {  int maxNbCells, x, y, freeRoute;
     switch (orientation) {
      case HORIZONTAL:
	// Checking upper three cells
	maxNbCells = 3;
	freeRoute = 1;
	x = xLeft + CELL_SIZE + CELL_SIZE/2;
	y = yTop  + CELL_SIZE + CELL_SIZE/2;
	do
	   if (getpixel(x, y) == BOARD_COLOR ){
	      x = x + CELL_SIZE;
	      maxNbCells--;
	   }
	   else  freeRoute = 0; // route is blocked
	while (maxNbCells >=1 && freeRoute);

	// Checking lower three cells
	if (freeRoute) { // if route is so far free
	   maxNbCells = 3;
	   freeRoute = 1;
	   x = xLeft + CELL_SIZE   + CELL_SIZE/2;
	   y = yTop  + 2*CELL_SIZE + CELL_SIZE/2;
	   do
	   if (getpixel(x, y) == BOARD_COLOR ){
	       x = x + CELL_SIZE;
	       maxNbCells--;
	   }
	   else  freeRoute = 0; // route is blocked
	   while (maxNbCells >=1 && freeRoute);
	}
	break;

      case VERTICAL:
	// Checking left two cells
	maxNbCells = 2;
	freeRoute = 1; // assume route is free
	x = xLeft - CELL_SIZE/2;
	y = yTop  + CELL_SIZE/2;
	do
	   if (getpixel(x, y) == BOARD_COLOR ){
	    y = y + CELL_SIZE;
	    maxNbCells--;
	   }
	   else  freeRoute = 0; // route is blocked
	while (maxNbCells > 0 && freeRoute);

	// Checking middle three cells
	if (freeRoute) { // if route is so far free
	   maxNbCells = 3;
	   freeRoute  = 1;
	   x = xLeft + CELL_SIZE + CELL_SIZE/2;
	   y = yTop  + CELL_SIZE + CELL_SIZE/2;
	   do
	  if (getpixel(x, y) == BOARD_COLOR ){
	     y = y + CELL_SIZE;
	     maxNbCells--;
	  }
	  else  freeRoute = 0; // route is blocked
	   while (maxNbCells > 0 && freeRoute);
	}

	// right most three cells
	if (freeRoute) { // if route is so far free
	   maxNbCells = 3;
	   freeRoute = 1;
	   x = xLeft + 2*CELL_SIZE + CELL_SIZE/2;
	   y = yTop  + CELL_SIZE   + CELL_SIZE/2;
	   do
	  if (getpixel(x, y) == BOARD_COLOR ){
	     y = y + CELL_SIZE;
	     maxNbCells--;
	  }
	  else  freeRoute = 0; // route is blocked
	   while (maxNbCells > 0 && freeRoute);
	}
	break;
     }
     return freeRoute;
  }


// Invoke the appropriate route checking function for rotation depending on block Id
int rotateRouteFree(int blockId, int orientation, int xLeft, int yTop)
   {   int freeRoute;
       switch(blockId) {
      case T_BLOCK  : break;
      case L_BLOCK  : break;
      case LR_BLOCK : break;
      case BOX_BLOCK: break;
      case BAR_BLOCK:
	   freeRoute = checkRotateBarRoute(orientation, xLeft, yTop);
	   break;
       }
       return freeRoute;
  }

// Rotate the Bar block
void rotateBarBlock(int & orientation, int & xLeft, int & yTop, int fillingColor)
 {
   // Erase the bar at current position
   drawBarBlock(xLeft, yTop, orientation, BKGRD_COLOR);
   // Now compute the new location
   switch (orientation) {
     case HORIZONTAL:
       orientation = VERTICAL;
       xLeft = xLeft + CELL_SIZE;
       yTop  = yTop  - CELL_SIZE;
       break;

     case VERTICAL:
       orientation = HORIZONTAL;
       xLeft = xLeft - CELL_SIZE;
       yTop  = yTop  + CELL_SIZE;
       break;
   }
   // Now redraw the bar at the new position
   drawBarBlock(xLeft, yTop, orientation, fillingColor /*FRGRD_COLOR*/);
 }

// Invokes the appropriate rotating function depending on the block Id
void rotateBlock(int blockId, int & orientation, int & xLeft, int & yTop,
			int fillingColor)
  {
       switch(blockId) {
      case T_BLOCK  :
      case L_BLOCK  :
      case LR_BLOCK :
      case BOX_BLOCK:
      case BAR_BLOCK:
	  rotateBarBlock(orientation, xLeft, yTop, fillingColor);
	  break;
       }
  }

// Invokes the appropriate function depending on the arrow key pressed
void handleUserInput(int blockId, int & orientation,
				int & xLeft, int & yTop, int fillingColor, int key)
 {
  switch(key) {
     case LEFTARROW:
	  if (translateRouteFree(blockId,orientation, xLeft, yTop, LEFT))
	       translateBlock(blockId, orientation, xLeft, yTop, fillingColor, LEFT); break;
     case RIGHTARROW:
	  if (translateRouteFree(blockId,orientation, xLeft, yTop, RIGHT))
	       translateBlock(blockId, orientation, xLeft, yTop, fillingColor, RIGHT); break;
     case UPARROW:
	  if (rotateRouteFree(blockId, orientation, xLeft, yTop))
	  rotateBlock(blockId, orientation, xLeft, yTop, fillingColor); break;
     case DOWNARROW:// Do you see any need for the DOWN Arrow key?
	  displayInfo("down arrow key pressed...");
	  break;
      }
 }

// checks whether or not game is over
int gameOver()
      {      int xLeft, yTop, maxNbCells, gOver;
	  // check if the top middle two/four cells are not covered
	  yTop  = TOPCORNER + CELL_SIZE /2;
	  xLeft = LEFTCORNER + 4*CELL_SIZE + CELL_SIZE/2;
	  maxNbCells = 2;  // or 4
	  gOver = 0;   // game is not over
	  while ( maxNbCells >= 1 && !gOver)
	   if (getpixel(xLeft, yTop) == BOARD_COLOR ){
	       xLeft = xLeft + CELL_SIZE;
	       maxNbCells--;
	   } else  gOver = 1; // game is over
	  return gOver;
      }

// checks confirmation of ESCAPE
int escapeConfirmed()
  {    char ans;
       displayInfo("Are you sure you want to Exit [Y/N] ?>");
       do
	 ans=toupper(char(getch()));
       while (ans != 'Y' && ans != 'N');
       if(ans == 'Y') return 1;
       else  return 0;
  }

// falls a block until it touches "ground"
int freeFall(int blockId, int orientation, int & xLeft, int & yTop,
		int fillingColor)
 { int fallBlocked = 0;
     if (translateRouteFree(blockId, orientation, xLeft, yTop, DOWN)) {
	translateBlock(blockId, orientation, xLeft, yTop, fillingColor, DOWN);
	delay(LEVEL1_SPEED); //Levels can be introduced
     } else fallBlocked = 1;
    return fallBlocked;
 }

// Controls the overall logic of the game
void playGame()
  {
int currentBlock, currentOrientation, key;
int xLeftCurrent, yTopCurrent, fillingColor, fallBlocked;
do {
  displayInfo("press ESC to abort the game");
  // clearKeyBoard(); // clears any key pressed
  generateNewBlock(&currentBlock, &currentOrientation, &xLeftCurrent,
	&yTopCurrent, &fillingColor);
  do { // loop as long as the current block is falling down
   do
    fallBlocked = freeFall(currentBlock, currentOrientation, xLeftCurrent,
yTopCurrent, fillingColor);
   while (!kbhit() && !fallBlocked);
   if (!fallBlocked) { // ie. key is pressed
    key=getch();
    switch(key) {
      case ESC:   if (!escapeConfirmed()) key = 1; break;
      case SPACE: displayInfo("space key pressed..."); break;
      case '\0' : { // Key is not int the 256 ASCII table
      key = getch();
      handleUserInput(currentBlock, currentOrientation, xLeftCurrent,
	yTopCurrent, fillingColor, key);
     }
   }
  }
  }while (key != ESC && !fallBlocked);
 }while (key != ESC && !gameOver());
}

// Launchs the game
int main() {
    int key;
    initGraphEngine();
    do {
     drawBoard();
     // clearKeyBoard(); // clears any previously pressed key strokes
     clearDisplayArea();
     displayInfo("press ENTER key to play or ESC to Exit");
     key=getch();
     switch(key) {
       case ESC:
	  if (!escapeConfirmed()) key = 1; // to erase ESCAPE
	  break;
       case ENTER:
	  playGame();
	  displayInfo("Game Over!!! Press any key ---> ");
	  getch();
	  break;
     } // switch
    } while (key != ESC); // this is to exit from the program
    displayInfo ("Come Again ... ");
    delay(1000);

    return 0;
}


